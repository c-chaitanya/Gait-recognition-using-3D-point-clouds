setwd("~/Desktop/pcl/2/svm/SVM_in_R")
library(e1071)
hist=read.csv2("combined.csv",header=FALSE,sep=' ',stringsAsFactors = FALSE)
hist=lapply(hist,as.numeric)
#hist=data.frame(hist1,hist2)
class=read.csv("class1.csv")
hist=data.frame(hist,Class=class$Class)
library(caTools)
set.seed(123)
sample=sample.split(hist$Class,SplitRatio = 0.70)
train=subset(hist,sample==TRUE)
test=subset(hist,sample==FALSE)
test_class=test$Class
test$Class=NULL
#mytunedsvm <- tune.svm(Class~., data = train, gamma = 2^(-1:1), cost = 2^(2:4))
#mytunedsvm <- tune.svm(Class~., data = train, gamma = 10^(-6:-2),  cost = 10^(1:3))
#mytunedsvm <- tune.svm(Class~., data = train, gamma = 2^(-14),  cost = 4 )
#mytunedsvm <- tune.svm(Class~., data = train, gamma = 10^(-6:-2),  cost = 10^(1:2))
#mytunedsvm <- tune.svm(Class~., data = train, cost=10^(-2:3), gamma=2^(-16:4))
#summary(mytunedsvm)
#plot (mytunedsvm, transform.x=log10, xlab=expression(log[10](gamma)), ylab="C")
#plot (mytunedsvm)
#model=svm(Class~.,data=train,type='C-classification')
#model=svm(Class~.,data=train,type='C-classification',cost=mytunedsvm$best.parameters[[2]],gamma=mytunedsvm$best.parameters[[1]], probability= TRUE)
model=svm(Class~.,data=train,type='C-classification',cost=10^(2),gamma=8, probability= TRUE)
#prediction=predict(model,newdata = test)
#prediction=predict(model,newdata = test,cost=mytunedsvm$best.parameters[[2]],gamma=mytunedsvm$best.parameters[[1]], probability = TRUE)
prediction=predict(model,newdata = test,cost=10^(2),gamma=8, probability = TRUE)
#summary(model)
summary(prediction)
attr(prediction, "probabilities")
out <- capture.output(attr(prediction, "probabilities"))
cat( out, file="svm10.txt", sep="\n")
#table(prediction,test_class)
library(caret)
confusionMatrix(test_class, prediction)
sample=sample.split(hist$Class,SplitRatio = 0.70)
setwd("~/Desktop/pcl/2/svm/SVM_in_R")
library(e1071)
hist=read.csv2("combined.csv",header=FALSE,sep=' ',stringsAsFactors = FALSE)
hist=lapply(hist,as.numeric)
#hist=data.frame(hist1,hist2)
class=read.csv("class1.csv")
hist=data.frame(hist,Class=class)
library(caTools)
set.seed(123)
sample=sample.split(hist$Class,SplitRatio = 0.70)
train=subset(hist,sample==TRUE)
test=subset(hist,sample==FALSE)
test_class=test$Class
test$Class=NULL
#mytunedsvm <- tune.svm(Class~., data = train, gamma = 2^(-1:1), cost = 2^(2:4))
#mytunedsvm <- tune.svm(Class~., data = train, gamma = 10^(-6:-2),  cost = 10^(1:3))
#mytunedsvm <- tune.svm(Class~., data = train, gamma = 2^(-14),  cost = 4 )
#mytunedsvm <- tune.svm(Class~., data = train, gamma = 10^(-6:-2),  cost = 10^(1:2))
#mytunedsvm <- tune.svm(Class~., data = train, cost=10^(-2:3), gamma=2^(-16:4))
#summary(mytunedsvm)
#plot (mytunedsvm, transform.x=log10, xlab=expression(log[10](gamma)), ylab="C")
#plot (mytunedsvm)
#model=svm(Class~.,data=train,type='C-classification')
#model=svm(Class~.,data=train,type='C-classification',cost=mytunedsvm$best.parameters[[2]],gamma=mytunedsvm$best.parameters[[1]], probability= TRUE)
model=svm(Class~.,data=train,type='C-classification',cost=10^(2),gamma=8, probability= TRUE)
#prediction=predict(model,newdata = test)
#prediction=predict(model,newdata = test,cost=mytunedsvm$best.parameters[[2]],gamma=mytunedsvm$best.parameters[[1]], probability = TRUE)
prediction=predict(model,newdata = test,cost=10^(2),gamma=8, probability = TRUE)
#summary(model)
summary(prediction)
attr(prediction, "probabilities")
out <- capture.output(attr(prediction, "probabilities"))
cat( out, file="svm10.txt", sep="\n")
#table(prediction,test_class)
library(caret)
confusionMatrix(test_class, prediction)
pcdfeatures <- read.csv("/home/me/Desktop/pcl/2/svm/CSV/.csv")
pcdfeatures <- read.csv("/home/me/Desktop/pcl/2/svm/CSV/")
install.packages("RCurl")
library(RCurl)
pcdfeatures <- list.files("/home/me/Desktop/pcl/2/svm/CSV/", full.names = TRUE)
pcdfeatures
class(pcdfeatures)
library(plyr)
setwd("~/Desktop/pcl/2/svm/SVM_in_R")
library(e1071)
hist=read.csv2("1.csv",header=FALSE,sep=' ',stringsAsFactors = FALSE)
hist=lapply(hist,as.numeric)
#hist=data.frame(hist1,hist2)
class=read.csv("class1.csv")
hist=data.frame(hist,Class=class$Class)
library(caTools)
set.seed(123)
sample=sample.split(hist$Class,SplitRatio = 0.70)
train=subset(hist,sample==TRUE)
test=subset(hist,sample==FALSE)
test_class=test$Class
test$Class=NULL
#mytunedsvm <- tune.svm(Class~., data = train, gamma = 2^(-1:1), cost = 2^(2:4))
#mytunedsvm <- tune.svm(Class~., data = train, gamma = 10^(-6:-2),  cost = 10^(1:3))
#mytunedsvm <- tune.svm(Class~., data = train, gamma = 2^(-14),  cost = 4 )
#mytunedsvm <- tune.svm(Class~., data = train, gamma = 10^(-6:-2),  cost = 10^(1:2))
#mytunedsvm <- tune.svm(Class~., data = train, cost=10^(-2:3), gamma=2^(-16:4))
#summary(mytunedsvm)
#plot (mytunedsvm, transform.x=log10, xlab=expression(log[10](gamma)), ylab="C")
#plot (mytunedsvm)
#model=svm(Class~.,data=train,type='C-classification')
#model=svm(Class~.,data=train,type='C-classification',cost=mytunedsvm$best.parameters[[2]],gamma=mytunedsvm$best.parameters[[1]], probability= TRUE)
model=svm(Class~.,data=train,type='C-classification',cost=10^(2),gamma=8, probability= TRUE)
#prediction=predict(model,newdata = test)
#prediction=predict(model,newdata = test,cost=mytunedsvm$best.parameters[[2]],gamma=mytunedsvm$best.parameters[[1]], probability = TRUE)
prediction=predict(model,newdata = test,cost=10^(2),gamma=8, probability = TRUE)
#summary(model)
summary(prediction)
attr(prediction, "probabilities")
out <- capture.output(attr(prediction, "probabilities"))
cat( out, file="svm10.txt", sep="\n")
#table(prediction,test_class)
library(caret)
confusionMatrix(test_class, prediction)
install.packages("caret")
library(caTools)
library(caret)
install.packages("caret",
repos = "http://cran.r-project.org",
dependencies = c("Depends", "Imports", "Suggests"))
library(caret)
install.packages('caret', dependencies=TRUE)
install.packages('caret', dependencies = TRUE)
install.packages("lme4", dependencies = TRUE)
library(lme4)
methods(sigma)
install.packages("pbkrtest", dependencies = TRUE)
library(caret)
install.packages(c('lme4', 'pbkrtest', 'BradleyTerry2', 'car', 'caret'))
install.packages(c("lme4", "pbkrtest", "BradleyTerry2", "car", "caret"))
install.packages('caret', dependencies = TRUE)
library(devtools)
install.packages('devtools', dependencies = TRUE)
install_github(https://github.com/topepo/caret.git)
install_github("https://github.com/topepo/caret.git")
packageurl <- "https://github.com/topepo/caret.git"
install.packages(packageurl, contriburl=NULL, type="source")
install.packages('caret')
install.packages( "/home/me/Downloads/caret-master.zip", repo=NULL, type="source")
install.packages( "/home/me/Downloads/caret-master.tar.gz", repo=NULL, type="source")
install.packages( "/home/me/Downloads/caret_6.0-73.tar.gz", repo=NULL, type="source")
install.packages("ggplot2")
install.packages("car")
install.packages("ModelMetrics")
install.packages( "/home/me/Downloads/ggplot2_2.2.1.tar.gz", repo=NULL, type="source")
install.packages( "/home/me/Downloads/ggplot2_2.0.0.tar.gz", repo=NULL, type="source")
install.packages('caret', repos='http://cran.rstudio.com/')
install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages("minqa")
install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages("gtable", dependencies = c("Depends", "Suggests"))
install.packages("scales", dependencies = c("Depends", "Suggests"))
install.packages("gtable", dependencies = c("Depends", "Suggests"))
install.packages("ggplot2", dependencies = c("Depends", "Suggests"))
install.packages( "/home/me/Downloads/ggplot2_2.0.0.tar.gz", repo=NULL, type="source")
install.packages("scales")
install.packages("ggplot2", dependencies = c("Depends", "Suggests"))
install.packages( "/home/me/Downloads/ggplot2_2.0.0.tar.gz", repo=NULL, type="source")
install.packages( "/home/me/Downloads/ggplot2_1.0.1.tar.gz", repo=NULL, type="source")
install.packages("proto", dependencies = c("Depends", "Suggests"))
install.packages( "/home/me/Downloads/ggplot2_1.0.1.tar.gz", repo=NULL, type="source")
install.packages("car", dependencies = c("Depends", "Suggests"))
install.packages( "/home/me/Downloads/car_2.1-1.tar.gz", repo=NULL, type="source")
install.packages( "/home/me/Downloads/car_2.0-10.tar.gz", repo=NULL, type="source")
install.packages( "/home/me/Downloads/ModelMetrics_1.0.0.tar.gz", repo=NULL, type="source")
